{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","onSubmit","submitName","value","name","onChange","nameInput","number","numberInput","type","Persons","showPersons","map","person","key","onClick","deletePerson","id","Filter","filternames","axios","get","then","response","data","newObject","console","log","post","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","errorMessage","setErrorMessage","useEffect","personService","initialPersons","event","target","preventDefault","names","includes","window","confirm","personToBeUpdated","find","updatedPerson","put","catch","error","setTimeout","personObject","concat","error_info","toLowerCase","personToBeDeleted","delete","remainingNames","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c6887df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n    return(\r\n        <div>\r\n        <form onSubmit={props.submitName}>\r\n            <div>name: <input value={props.name}\r\n            onChange={props.nameInput}/></div>\r\n            <div>number: <input value={props.number}\r\n            onChange={props.numberInput}/></div>\r\n            <div><button type=\"submit\">add</button></div>\r\n      </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react';\r\n\r\nconst Persons = (props) => {\r\n    return(\r\n        <div>\r\n            {props.showPersons.map( person => \r\n            <p key={person.name}>\r\n              {person.name} &nbsp;\r\n              {person.number} &nbsp;\r\n              <button onClick={() => props.deletePerson(person.id)}>delete</button>\r\n              </p>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div> filter shown with &nbsp;\r\n            <input onChange={props.filternames}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n//'https://cryptic-bayou-39171.herokuapp.com/api/persons'\r\n//'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    console.log('servicessä', newObject)\r\n    return axios.post(baseUrl, newObject)\r\n    /*\r\n    \r\n    const request = axios.post(baseUrl, newObject)\r\n    console.log('request', request)\r\n    return request.then(response => response.data)*/\r\n}\r\n  \r\n\r\n//const deletePerson = id => {\r\n  //  axios.delete(`${baseUrl}/${id}`)\r\n    //return request.then(response => response.data)\r\n//}\r\n\r\n\r\n/*\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}*/\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    //deletePerson : deletePerson\r\n    //update: update\r\n}","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\nimport axios from 'axios'\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const baseUrl = '/api/persons'\n  //'https://cryptic-bayou-39171.herokuapp.com/api/persons'\n  //'http://localhost:3001/api/persons'\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n\n    const names = persons.map( person => person.name )\n    console.log(names)\n\n    if (names.includes(newName)) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){ \n        const personToBeUpdated = persons.find(person => person.name === newName )\n        const updatedPerson = { ...personToBeUpdated, number: newNumber}\n        //siirrä tämä vielä serviceen?\n        axios\n          .put(`${baseUrl}/${updatedPerson.id}`, updatedPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== personToBeUpdated.id ? person : response.data))          \n          })\n\n          .catch(error => {\n            setErrorMessage(\n              `Information of ${newName} has already been removed from server`\n            )\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n            \n          })\n          setErrorMessage(\n            `${newName}'s number was updated`\n          )\n          setTimeout(() =>{\n            setErrorMessage(null)\n          }, 5000)\n      }\n    } else {\n\n      const personObject = {\n        name : newName,\n        number : newNumber\n      }  \n\n      console.log('lisätään', personObject)\n\n      personService\n        .create(personObject)\n        .then(response => {\n          console.log('response.data', response.data)\n          setPersons(persons.concat(response.data))\n        })\n\n        /*\n        .then(returnedPerson => {\n          console.log('takaisin', returnedPerson)\n          setPersons(persons.concat(returnedPerson))    \n        })\n        */\n       \n        .catch(error => {\n          console.log(error.response.data)\n          const error_info = error.response.data.error\n          setErrorMessage(`${error_info}`)\n        })\n        \n\n        setErrorMessage(\n          `${newName} was added to phonebook`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n       \n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deleteName = (id) => {\n    const personToBeDeleted = persons.find(person => person.id === id )\n    \n    if (window.confirm(`Delete ${personToBeDeleted.name}?`)) {\n      axios\n      .delete(`${baseUrl}/${id}`)    \n      .then(response => console.log(response))\n      const remainingNames = persons.filter(person => person.id !== id)\n      setPersons(remainingNames)\n\n      setErrorMessage(\n        `${personToBeDeleted.name} was deleted from phonebook`\n      )\n      setTimeout(() =>{\n        setErrorMessage(null)\n      }, 5000)\n    }\n     \n  }\n\n  const handleNameInput = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)   \n  }\n\n  const handleNumberInput = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  } \n\n  const filteredPersons = () => {\n    if (filter === (''))\n        { \n          return persons\n        }\n        else {\n          return persons.filter(person => person.name.toLowerCase().includes(filter))\n        }                \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {errorMessage} />\n      <Filter filternames={handleFilter}/>\n      \n      <h3>Add a new</h3>\n      \n      <PersonForm submitName={addName} \n        nameInput={handleNameInput} \n        numberInput={handleNumberInput}\n        name={newName}\n        number={newNumber}/>\n\n      <h3>Numbers</h3>\n      <Persons showPersons={filteredPersons()} deletePerson={deleteName} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}